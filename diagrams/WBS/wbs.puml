@startwbs WBS
* Basketify (Full Stack Machine Learning Application)

** User Registration (FR1)
*** Design registration UI
*** Implement form validation
*** Develop backend API
*** Store credentials securely
*** Implement email verification
*** Handle errors and feedback
*** Write unit tests
*** Deploy and test

** User Login (FR2)
*** Develop login UI
*** Implement authentication (JWT/Sessions)
*** Verify credentials with DB
*** Hash and verify passwords
*** Handle incorrect login attempts
*** Implement session persistence
*** Develop password reset feature
*** Test login scenarios

** Main Dashboard (FR4 - FR6)
*** Describe objects on dashboard
*** Design layout of dashboard in Figma diagram
*** Write frontend for dashboard (HTML/CSS)

*** FR4 - Dashboard.Search_Connection
**** Create frontend search widget
**** Style dashboard to display widget in a large, visible place
**** Route user to search page for onlick of widget
**** Write Activity / UI test cases

*** FR5 - Dashboard.Favourite_Team_Shortcut
**** Store user's favourite team in DB
**** Write Django "Model" to store user and their favourite team
**** Write Django "View" to use the Model to retive favourite team
**** Set return of Django View as JSON object
**** Set Django URL Pattern to call Django View when path 'get-fave-team/{username}' is accessed
**** Create frontend favourite team widget
**** Style dashboard to display widget in a large, visible place
**** Set widget onlick to route to get-fave-team/{username} path
**** Route user to stats page for fave team value retrieved
**** Write test cases for Django View function
**** Write Activity / UI test cases

*** FR6 - Dashboard.Favourite_Player_Shortcut
**** Store user's favourite player in DB
**** Write Django "Model" to store user and their fave player
**** Write Django "View" to use the Model to retive fave player
**** Set return of Django View as JSON object
**** Set Django URL Pattern to call Django View when path 'get-fave-player/{username}' is accessed
**** Create frontend favourite player widget
**** Style dashboard to display widget in a large, visible place
**** Set widget onlick to route to get-fave-player/{username} path
**** Route user to stats page for fave player value retrieved
**** Write test cases for Django View function
**** Write Activity / UI test cases


** Search Interface (FR7 - FR8)
*** Develop search bar UI
*** Implement autocomplete
*** Optimize search speed
*** Fetch search results from DB
*** Implement wildcard search
*** Display search results properly
*** Add search filtering options
*** Write test cases for accuracy

** Data Visualization (FR9 - FR15)
*** Design tabular stats view
*** Implement interactive graphs
*** Integrate hover interactions
*** Develop dual-comparison mode
*** Optimize graph rendering
*** Implement statistical filtering
*** Connect graphs with backend APIs
*** Perform cross-browser testing

** Player/Team Forecast (FR16 - FR18)
*** Develop forecast UI
*** Integrate backend ML model
*** Preprocess historical data
*** Train/test ML model
*** Display predictions dynamically
*** Implement accuracy logging
*** Optimize real-time processing
*** Validate predictions with actual results

** Predict Win/Loss (FR19 - FR20)
*** Implement win/loss UI
*** Develop ML model for predictions
*** Fetch team statistics
*** Train model with past match data
*** Display prediction results
*** Implement real-time updates
*** Compare with actual game results
*** Conduct A/B testing on models

** Predict NBA Champion (FR21 - FR22)
*** Implement championship prediction UI
*** Train ML model for season forecast
*** Collect historical championship data
*** Evaluate long-term model accuracy
*** Display season-long predictions
*** Update model inputs dynamically
*** Handle season anomalies
*** Validate model results

** Log ML Performance (FR23 - FR24)
*** Implement ML logging system
*** Store actual vs predicted results
*** Develop performance reports
*** Train models based on feedback
*** Optimize retraining frequency
*** Implement error tracking
*** Ensure logging efficiency
*** Conduct ML audits

** Statistics Filtering (FR25 - FR28)
*** Implement filtering UI
*** Add multiple filtering options
*** Optimize database queries
*** Connect filters to visualization
*** Ensure real-time updates
*** Implement reset filter option
*** Optimize filter performance
*** Validate filtering logic with tests

@endwbs


