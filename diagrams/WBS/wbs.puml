@startwbs WBS
* Basketify (Full Stack Machine Learning Application)

** User Login and Registration (FR1-FR3)
*** FR1 - User.Register
**** Design registration form UI in Figma
**** Create registration form using React
**** Implement form validation
**** Create user database schema for MongoDB
**** Develop backend API for registration using Django
**** Store credentials securely in MongoDB database
**** Implement email verification
**** Ensure email uniqueness in the database
**** Encrypt and store user passwords
**** Add user notifications of successful registration
**** Handle form errors and display form error messages for users
**** Write unit tests for user registration

*** FR2 - User.Login
**** Design login form UI in Figma
**** Create login form using React
**** Implement backend for login authentication using Django
**** Verify credentials with database
**** Hash and verify passwords
**** Handle incorrect login attempts through error messages
**** Secure login form against injection attacks
**** Manage sessions for logged-in users
**** Implement session persistence
**** Audit login attempts (successful/failed)
**** Develop password reset feature
**** Provide account lockout mechanism after multiple failed attempts
**** Test login scenarios with existing and non-existing users

*** FR3 - User.ChangeEmailPassword
**** Design password and email reset request form in Figma
**** Generate secure tokens for password and email reset links
**** Send reset links via email to registered users
**** Validate password strength (e.g., length, special characters, sequeunces)
**** Add confirmation message for new email
**** Add confirmation message for new pasword
**** Check if unique email and/or password are created
**** Notify users about successful password and/or email changes
**** Handle token expiration and invalidation scenarios
**** Implement backend for password and email updates
**** Integrate security of password and email management workflows


** Main Dashboard (FR4 - FR6)

*** FR4 - Dashboard.Search_Connection
**** Describe objects on dashboard
**** Design layout of dashboard in Figma diagram
**** Write frontend for dashboard (HTML/CSS)
**** Create frontend search widget
**** Style dashboard to display widget in a large, visible place
**** Route user to search page for onlick of widget
**** Write Activity / UI test cases

*** FR5 - Dashboard.Favourite_Team_Shortcut
**** Store user's favourite team in DB
**** Write Django "Model" to store user and their favourite team
**** Write Django "View" to retive favourite team into Model
**** Set return of Django View as JSON object
**** Set Django URL Pattern to call Django View when path 'get-fave-team/{username}' is accessed
**** Create frontend favourite team widget
**** Style dashboard to display widget in a large, visible place
**** Set widget onlick to route to get-fave-team/{username} path
**** Route user to stats page for fave team value retrieved
**** Write unit test cases for Django View function
**** Write Activity / UI test cases

*** FR6 - Dashboard.Favourite_Player_Shortcut
**** Store user's favourite player in DB
**** Write Django "Model" to store user and their fave player
**** Write Django "View" to retrieve fave player into Model
**** Set return of Django View as JSON object
**** Set Django URL Pattern to call Django View when path 'get-fave-player/{username}' is accessed
**** Create frontend favourite player widget
**** Style dashboard to display widget in a large, visible place
**** Set widget onlick to route to get-fave-player/{username} path
**** Route user to stats page for fave player value retrieved
**** Write unit test cases for Django View function
**** Write Activity / UI test cases


** Search Interface (FR7 - FR8)
*** Write frontend for fillable search bar
*** Write user instructions: Describe wildcard matching on search page

*** FR7 - Search.Player
**** Setup MongoDB Collection for player names
**** Write server-side function to pull player names from nba_api
**** Schedule server-side function to run every 24 hours & update Collection
**** Write Django "Model" to contain player names
**** Write Django "View" to retrieve matching player names given regex into Model
**** Set return of Django View as JSON object of matching player names
**** Set Django URL Pattern to call Django View when path 'get-players/{regex}' is accessed
**** Create frontend list to display player names
**** Style frontend list of players to be clickable and displayed well
**** For each player name in list, set onlick to route to stats for that player "player-stats/{player_name}"
**** Write unit test cases for Django View function (retrieve player names from regex)
**** Write Activity / UI test cases

*** FR8 - Search.Team
**** Setup MongoDB Collection for team names
**** Write server-side function to pull team names from nba_api
**** Schedule server-side function to run every 24 hours & update Collection
**** Write Django "Model" to contain team names
**** Write Django "View" to retrieve matching team names given regex into Model
**** Set return of Django View as JSON object of matching team names
**** Set Django URL Pattern to call Django View when path 'get-team/{regex}' is accessed
**** Create frontend list to display team names
**** Style frontend list of team to be clickable and displayed well
**** For each team name in list, set onlick to route to stats for that team "team-stats/{team}"
**** Write unit test cases for Django View function (retrieve team names from regex)
**** Write Activity / UI test cases


** Data Visualization (FR9 - FR15)
*** FR9 - Display.Table
**** Setup MongoDB Collection for player & team stats for one season
**** Write server-side function to pull player & team stats from nba_api
**** Schedule server-side functions to run every 24 hours & update Collections
**** Write Django "Model" to contain player & team stats
**** Write Django "View" to retrieve stats for a given player & team in latest season into Model
**** Set return of Django View as JSON object of stats
**** Set Django URL Pattern to call Django View when path 'get-player(team)-stats/{player_name}/{season}' is accessed
**** Create frontend table to display retrieved stats for the player/team in one season
**** Write unit test cases for player Django View function (retrieve player/team stats given their name)
**** Write Activity / UI test cases for player & team stats

*** FR10 - Table.Time_Window
**** Create frontend dropdown/widget to select game or season basis for the player/team
**** Write Django "View" to retrieve seasonally-based stats for player into Model
**** Write Django "View" to retrieve seasonally-based stats for team into Model
**** Set value=='season-basis' of widget to direct user to path 'get-player-stats/{player_name}/seasonal'
**** Set value=='season-basis' of widget to direct user to path 'get-team-stats/{team_name}/seasonal'
**** Create frontend table to display player/team stats on seasonal basis
**** Fill frontend table with retrieved stats when page loaded
**** Write unit test cases for player Django View function (retrieve player stats on seasonal basis)
**** Write unit test cases for team Django View function (retrieve team stats on seasonal basis)
**** Write Activity / UI test cases for player seasonal stats
**** Write Activity / UI test cases for team seasonal stats

*** FR11 - Display.Graph
**** Create frontend widget to select stats view in table or graph format
**** Set onClick of widget to direct user to path of current + '/graph'
**** Create frontend graph display area
**** Create frontend list of stats to select from
**** Create frontend widget to select to view stats on game or season basis
**** Write Activity / UI test cases for navigating to blank stats graph

*** FR12 - Graph.Select_Stat
**** Write Django "Model" to contain player time-series stats
**** Write Django "Model" to contain team time-series stats
**** Write Django "View" to retrieve player time-series stats into Model based on player name
**** Write Django "View" to retrieve team time-series stats into Model based on team name
**** Set onClick of stats selector to append '/{stat_name}' to path
**** Restrict user from having more than 2 stats selected at a time
**** Display 2 y-axes if 2 stats are selected
**** Display time series of selected stats when page is loaded
**** Style the graph: titles given selected stats, coloring of series, legend

*** FR13 - Graph.Deselect_Stat
**** Set variable holding selected stats based on path
**** Add checkSelected(stat_name) JS function: return true if stat_name currently selected
**** Set onClick of stats selector to remove {stat_name} from path if checkSelected(stat_name) is true

*** FR14 - Graph.Hover
**** Use Plotly.js to display graph of stats
**** Config Plotly.js graph to be hoverable
**** Style graph hover box to show axes values
**** Handle case for 2 stats being displayed (2 y-axis values)

*** FR15 - Graph.Time_Window
**** Write Django "Model" to contain player or team time-series stat on seasonal basis
**** Write Django "View" to retrieve player time-series seasonal stat into Model based on player name
**** Write Django "View" to retrieve team time-series seasonal stat into Model based on team name
**** Create frontend widget for user to select to view stat(s) on a game or seasonal basis
**** Set widget onClick to append/remove '/seasonal' to current path
**** Scale x-axis to fit only seasons the player/team have been active


** Player/Team Forecast (FR16 - FR18)
*** FR16 - ML.Player_Prompt
**** Design UI form for player selection using React
**** Implement search functionality for quick player selection
**** Validate player name input (handle incorrect, partial, or ambiguous names)
**** Write Django "View" to fetch player's historical game stats from MongoDB
**** Develop a data transformation pipeline for preprocessing player stats
**** Implement API call to ML model for player performance prediction
**** Store ML predictions in MongoDB for caching and analysis
**** Display ML predictions dynamically on the frontend
**** Implement UI indicators for ML prediction confidence scores
**** Handle API errors and implement a retry mechanism for model failures
**** Develop backend logging to track incorrect or missing predictions
**** Write unit tests for ML integration, frontend updates, and error handling

*** FR17 - ML.Team_Prompt
**** Create UI dropdown to select a team for predictions
**** Implement an autofill mechanism for quick team selection
**** Validate team selection input (handle incorrect or missing teams)
**** Write Django "View" to fetch team historical performance data
**** Develop a pre-processing pipeline to clean and aggregate team statistics
**** Implement API call to ML model to generate team forecasts
**** Store ML-predicted team stats in MongoDB for retrieval
**** Display forecasted team statistics dynamically on the UI
**** Implement UI indicators to show ML model confidence intervals
**** Handle errors and implement API fallback solutions
**** Develop backend monitoring to detect and log incorrect forecasts
**** Write unit tests for Django views, ML integration, and UI updates

*** FR18 - ML.Forecast
**** Setup MongoDB collection to store forecasted stats for both players and teams
**** Write scheduled backend job to update ML forecasts periodically
**** Implement version control for ML models to compare different prediction models
**** Store ML prediction confidence scores alongside forecasted stats
**** Implement real-time performance tracking for ML forecasts
**** Develop frontend widget to toggle between actual vs predicted stats
**** Enable graph overlays to compare ML-predicted and real-world stats
**** Log incorrect predictions to refine and retrain ML models
**** Optimize MongoDB queries for efficient retrieval of forecast data
**** Develop an admin panel to visualize and monitor ML forecast accuracy
**** Implement API to retrieve forecast accuracy history for developers
**** Write unit and integration tests for forecast pipeline, caching, and model validation

** Predict Win/Loss (FR19 - FR20)
*** FR19 - ML.Team_Prompt
**** Develop UI dropdown for team selection in win/loss prediction
**** Implement an autofill mechanism to enhance UX for selecting teams
**** Fetch latest team rosters from nba_api for more accurate predictions
**** Develop a pre-processing pipeline for matchup history analysis
**** Write Django "View" to fetch matchup history and win/loss trends
**** Implement API call to ML model for win probability calculation
**** Store ML-generated win/loss predictions in MongoDB for analysis
**** Implement real-time probability updates before game start
**** Display confidence percentage alongside predicted outcomes
**** Develop frontend UI elements to compare team stats before prediction
**** Implement logging and analytics to track ML accuracy over time
**** Write unit and integration tests for Django API, ML model, and UI

*** FR20 - ML.Predict_WinLoss
**** Store previous game results and ML predictions for comparison
**** Implement backend job to compute ML model prediction success rate
**** Develop an API to provide historical win/loss prediction accuracy
**** Display UI statistics showing accuracy of previous predictions
**** Implement real-time match data fetching to improve ML model accuracy
**** Introduce rolling win probability updates for ongoing live games
**** Develop a fallback mechanism to reprocess predictions in case of missing data
**** Provide pre-match team matchup analysis alongside win probability
**** Enable users to compare ML win/loss predictions with expert opinions
**** Implement logging for incorrectly predicted games for ML model refinement
**** Conduct A/B testing with different ML architectures for optimal prediction
**** Write automated tests for ML accuracy, Django views, and UI components

** Predict NBA Champion (FR21 - FR22)
*** FR21 - ML.Predict_Champion
**** Aggregate season-long statistics for all teams in MongoDB
**** Implement ML model pipeline to predict playoff progression probabilities
**** Develop feature importance analysis to identify key championship predictors
**** Store ML-generated championship predictions in MongoDB
**** Implement an API to fetch the latest championship projections
**** Develop frontend visualizations for championship odds over time
**** Implement UI indicators for confidence intervals in champion prediction
**** Optimize database queries to retrieve team championship probability efficiently
**** Enable visualization of probability fluctuations over the season
**** Log incorrect predictions and retrain ML model with updated historical data
**** Implement an admin panel to track the performance of the championship predictor
**** Write unit tests to validate data integrity in the championship prediction pipeline

*** FR22 - ML.Display_Champion
**** Design an interactive UI component to showcase championship predictions
**** Implement historical championship comparison (e.g., previous 5 seasons)
**** Develop graph visualization to illustrate championship odds fluctuations
**** Implement ML explainability features to display reasoning behind predictions
**** Optimize Django query performance for fast championship retrieval
**** Enable filtering predictions based on key factors (injuries, trades, streaks)
**** Provide an option to compare ML predictions against human expert picks
**** Display championship insights dynamically based on real-time team performance
**** Write UI responsiveness tests to ensure optimal performance on all devices
**** Implement caching mechanisms to avoid excessive recomputation
**** Log user interactions to analyze most viewed championship insights
**** Develop an API for external applications to fetch championship predictions

** Log ML Performance (FR23 - FR24)
*** FR23 - ML.Compare
**** Retrieve past game results and ML predictions for comparison
**** Develop an automated script to generate ML accuracy reports
**** Store prediction accuracy metrics in a dedicated MongoDB collection
**** Display ML accuracy trends on the admin dashboard with visualizations
**** Implement backend logic to flag consistently inaccurate predictions
**** Develop a monitoring system to identify degrading ML performance
**** Automate accuracy validation with real-time prediction comparisons
**** Implement alerts for sudden accuracy drops in ML models
**** Enable developers to request re-evaluation of past predictions
**** Log errors and incorrect forecasts for debugging and retraining
**** Write API to expose ML performance metrics for external integrations
**** Implement scheduled reports on model performance improvements

*** FR24 - ML.Feedback_Loop
**** Design ML retraining workflows based on accuracy feedback
**** Implement periodic evaluations of stored prediction accuracy data
**** Store ML model hyperparameters and version control history
**** Develop an admin interface to manually trigger model retraining
**** Optimize ML retraining to ensure minimal downtime in live predictions
**** Introduce self-learning mechanisms for continuous ML improvement
**** Implement real-time user feedback on ML predictions for refinement
**** Develop alert system for anomalies detected in ML performance trends
**** Implement comparison of different ML retraining strategies
**** Store retrained model logs for auditing and debugging
**** Write automated tests for feedback integration in ML retraining pipeline

** Statistics Filtering (FR25 - FR28)
*** FR25 - Filter.Criteria_Display
**** Design filtering UI in Figma
**** Create filtering section for displaying stats in React
**** Implement team-specific filters(i.e. by conference, by divison, etc.) in React
**** Implement segment-based(month, last N games, pre/post all-star) filter in React
**** Implement season type filter
**** Implement game scenario based filters(by quarter, win/loss, game halves)
**** Implement year filter(e.g. 2018-19, 2019-20, etc.)
**** Implement date range filter
**** Implement filters to display basic or advanced stats
**** Add option to select specific columns to display(i.e. Points, rebounds, team name, etc.)
**** Validate filtering logic with tests
**** Add backend logic to connect filters to update visualized results
**** Provide feedback messages when no results show

*** FR26 - Filter.Dynamic_Update
**** Optimize database queries
**** Implement real-time updates upon user selection
**** Cache result of frequently used filters for optimized performance
**** Optimize filter performance using lazy loading and/or pagination
**** Check for consistency between filtered results and graph view
**** Monitor backend API response time based on filters
**** Create automated UI and backend tests for filter updates
**** Display filtered results on page

*** FR27 - Filter.Multiple_Criteria
**** Add multiple filtering options in UI
**** Implement backend logic to combine multiple filters
**** Display selected filters for user
**** Allow users to modify filters without affecting other filters
**** Integrate automated UI and backend tests for multiple filters
**** Ensure filtering does not breaking when user switches to other webpages
**** Use indexing to optimize queries with multiple filters
**** Log filters used to see results
**** Add option for user to view recently user filters


*** FR28 - Filter.Reset
**** Add reset filter option in UI
**** Ensure reset filter defaults to using no filters
**** Handle UI updates dynamically upon reset without reloading
**** Implement backend logic to clear filters in a session
**** Ensure reset filter syncs with tabular and graph views(stats displayed with no filters)
**** Add automated UI and backend tests for filter resetting
**** Add message to confirm reset of filters
**** Test reset filter with different result combinations(for small and large results)

@endwbs


