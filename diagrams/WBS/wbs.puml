@startwbs WBS
* Basketify (Full Stack Machine Learning Application)

** User Login and Registration (FR1-FR3)
*** FR1 - User Registration
**** Design registration form UI
**** Implement form validation
**** Create user database schema
**** Develop backend API for registration using Django
**** Store credentials securely
**** Implement email verification
**** Ensure email uniqueness in the database
**** Encrypt and store user passwords
**** Add user notifications of successful registration
**** Handle errors and feedback
**** Write unit tests
**** Deploy and test

*** FR2 - User Login
**** Design login form UI
**** Implement backend for login authentication using 
**** Verify credentials with database
**** Hash and verify passwords
**** Handle incorrect login attempts through error messages
**** Secure login form against injection attacks
**** Manage sessions for logged-in users
**** Implement session persistence
**** Audit login attempts (successful/failed)
**** Ensure compatibility with mobile devices and browsers
**** Develop password reset feature
**** Provide account lockout mechanism after multiple failed attempts
**** Test login scenarios

*** FR3 - User Change Email and/or Password
**** Design password and email reset request form
**** Generate secure tokens for password and email reset links
**** Send reset links via email to registered users
**** Validate password strength (e.g., length, special characters, sequeunces)
**** Add confirmation message for new email
**** Add confirmation message for new pasword
**** Check if unique email and/or password are created
**** Notify users about successful password and/or email changes
**** Handle token expiration and invalidation scenarios
**** Implement backend for password and email updates
**** Integrate security of password and email management workflows


** Main Dashboard (FR4 - FR6)
*** Describe objects on dashboard
*** Design layout of dashboard in Figma diagram
*** Write frontend for dashboard (HTML/CSS)

*** FR4 - Dashboard.Search_Connection
**** Create frontend search widget
**** Style dashboard to display widget in a large, visible place
**** Route user to search page for onlick of widget
**** Write Activity / UI test cases

*** FR5 - Dashboard.Favourite_Team_Shortcut
**** Store user's favourite team in DB
**** Write Django "Model" to store user and their favourite team
**** Write Django "View" to retive favourite team into Model
**** Set return of Django View as JSON object
**** Set Django URL Pattern to call Django View when path 'get-fave-team/{username}' is accessed
**** Create frontend favourite team widget
**** Style dashboard to display widget in a large, visible place
**** Set widget onlick to route to get-fave-team/{username} path
**** Route user to stats page for fave team value retrieved
**** Write unit test cases for Django View function
**** Write Activity / UI test cases

*** FR6 - Dashboard.Favourite_Player_Shortcut
**** Store user's favourite player in DB
**** Write Django "Model" to store user and their fave player
**** Write Django "View" to retrieve fave player into Model
**** Set return of Django View as JSON object
**** Set Django URL Pattern to call Django View when path 'get-fave-player/{username}' is accessed
**** Create frontend favourite player widget
**** Style dashboard to display widget in a large, visible place
**** Set widget onlick to route to get-fave-player/{username} path
**** Route user to stats page for fave player value retrieved
**** Write unit test cases for Django View function
**** Write Activity / UI test cases


** Search Interface (FR7 - FR8)
*** Write frontend for fillable search bar
*** Write user instructions: Describe wildcard matching on search page

*** FR7 - Search.Player
**** Setup MongoDB Collection for player names
**** Write server-side function to pull player names from nba_api
**** Schedule server-side function to run every 24 hours & update Collection
**** Write Django "Model" to contain player names
**** Write Django "View" to retrieve matching player names given regex into Model
**** Set return of Django View as JSON object of matching player names
**** Set Django URL Pattern to call Django View when path 'get-players/{regex}' is accessed
**** Create frontend list to display player names
**** Style frontend list of players to be clickable and displayed well
**** For each player name in list, set onlick to route to stats for that player "player-stats/{player_name}"
**** Write unit test cases for Django View function (retrieve player names from regex)
**** Write Activity / UI test cases

*** FR8 - Search.Team
**** Setup MongoDB Collection for team names
**** Write server-side function to pull team names from nba_api
**** Schedule server-side function to run every 24 hours & update Collection
**** Write Django "Model" to contain team names
**** Write Django "View" to retrieve matching team names given regex into Model
**** Set return of Django View as JSON object of matching team names
**** Set Django URL Pattern to call Django View when path 'get-team/{regex}' is accessed
**** Create frontend list to display team names
**** Style frontend list of team to be clickable and displayed well
**** For each team name in list, set onlick to route to stats for that team "team-stats/{team}"
**** Write unit test cases for Django View function (retrieve team names from regex)
**** Write Activity / UI test cases


** Data Visualization (FR9 - FR15)
*** FR9 - Display.Table
**** Setup MongoDB Collection for player & team stats for one season
**** Write server-side function to pull player & team stats from nba_api
**** Schedule server-side functions to run every 24 hours & update Collections
**** Write Django "Model" to contain player & team stats
**** Write Django "View" to retrieve stats for a given player & team in latest season into Model
**** Set return of Django View as JSON object of stats
**** Set Django URL Pattern to call Django View when path 'get-player(team)-stats/{player_name}/{season}' is accessed
**** Create frontend table to display retrieved stats for the player/team in one season
**** Write unit test cases for player Django View function (retrieve player/team stats given their name)
**** Write Activity / UI test cases for player & team stats

*** FR10 - Table.Time_Window
**** Create frontend dropdown/widget to select game or season basis for the player/team
**** Write Django "View" to retrieve seasonally-based stats for player into Model
**** Write Django "View" to retrieve seasonally-based stats for team into Model
**** Set value=='season-basis' of widget to direct user to path 'get-player-stats/{player_name}/seasonal'
**** Set value=='season-basis' of widget to direct user to path 'get-team-stats/{team_name}/seasonal'
**** Create frontend table to display player/team stats on seasonal basis
**** Fill frontend table with retrieved stats when page loaded
**** Write unit test cases for player Django View function (retrieve player stats on seasonal basis)
**** Write unit test cases for team Django View function (retrieve team stats on seasonal basis)
**** Write Activity / UI test cases for player seasonal stats
**** Write Activity / UI test cases for team seasonal stats

*** FR11 - Display.Graph
**** Create frontend widget to select stats view in table or graph format
**** Set onClick of widget to direct user to path of current + '/graph'
**** Create frontend graph display area
**** Create frontend list of stats to select from
**** Create frontend widget to select to view stats on game or season basis
**** Write Activity / UI test cases for navigating to blank stats graph

*** FR12 - Graph.Select_Stat
**** Write Django "Model" to contain player time-series stats
**** Write Django "Model" to contain team time-series stats
**** Write Django "View" to retrieve player time-series stats into Model based on player name
**** Write Django "View" to retrieve team time-series stats into Model based on team name
**** Set onClick of stats selector to append '/{stat_name}' to path
**** Restrict user from having more than 2 stats selected at a time
**** Display 2 y-axes if 2 stats are selected
**** Display time series of selected stats when page is loaded
**** Style the graph: titles given selected stats, coloring of series, legend

*** FR13 - Graph.Deselect_Stat
**** Set variable holding selected stats based on path
**** Add checkSelected(stat_name) JS function: return true if stat_name currently selected
**** Set onClick of stats selector to remove {stat_name} from path if checkSelected(stat_name) is true

*** FR14 - Graph.Hover
**** Use Plotly.js to display graph of stats
**** Config Plotly.js graph to be hoverable
**** Style graph hover box to show axes values
**** Handle case for 2 stats being displayed (2 y-axis values)

*** FR15 - Graph.Time_Window
**** Write Django "Model" to contain player or team time-series stat on seasonal basis
**** Write Django "View" to retrieve player time-series seasonal stat into Model based on player name
**** Write Django "View" to retrieve team time-series seasonal stat into Model based on team name
**** Create frontend widget for user to select to view stat(s) on a game or seasonal basis
**** Set widget onClick to append/remove '/seasonal' to current path
**** Scale x-axis to fit only seasons the player/team have been active


** Player/Team Forecast (FR16 - FR18)
*** FR16 - ML.Player_Prompt
**** Create UI form to enter player name
**** Validate player name input before submission
**** Write Django "View" to retrieve player's past game stats from DB
**** Write Django "Model" to store player time-series statistics
**** Implement API call to ML model to predict stats
**** Display ML predictions on frontend dynamically
**** Handle API errors and display fallback messages
**** Write unit tests for ML integration and API calls

*** FR17 - ML.Team_Prompt
**** Create UI form to enter team name
**** Validate team name input before submission
**** Write Django "View" to retrieve team’s historical performance data
**** Write Django "Model" to store team time-series statistics
**** Implement API call to ML model to predict team performance
**** Display forecasted team stats on frontend
**** Optimize data retrieval for fast API responses
**** Write unit tests for ML accuracy and database queries

*** FR18 - ML.Forecast
**** Setup MongoDB collection to store forecasted stats
**** Write scheduled backend job to update forecasts periodically
**** Store ML prediction confidence scores alongside stats
**** Create frontend widget to toggle between actual vs predicted stats
**** Implement UI highlighting for forecast accuracy (green = high, red = low)
**** Enable comparison between predicted and actual performance
**** Log incorrect predictions to improve ML training
**** Develop admin panel to monitor ML performance metrics

** Predict Win/Loss (FR19 - FR20)
*** FR19 - ML.Team_Prompt
**** Develop UI dropdown to select a team for prediction
**** Ensure API retrieves the latest available team roster data
**** Implement data pre-processing pipeline for ML predictions
**** Write Django "View" to retrieve matchup history for selected team
**** Pass matchup statistics to ML model for inference
**** Display confidence percentage for predicted outcomes
**** Optimize API responses to ensure predictions load under 2s
**** Write test cases for win/loss prediction accuracy

*** FR20 - ML.Predict_WinLoss
**** Store previous game results and predictions for comparison
**** Implement backend job to compute prediction success rate
**** Update UI to show percentage of correct predictions in past games
**** Implement real-time match data fetching to improve ML input
**** Integrate rolling win probability updates for live games
**** Develop fallback mechanism if ML model fails to return predictions
**** Provide team matchups analysis alongside ML predictions
**** Conduct A/B testing on different ML models for accuracy

** Predict NBA Champion (FR21 - FR22)
*** FR21 - ML.Predict_Champion
**** Aggregate season-long statistics for all teams
**** Implement ML training pipeline for playoff and final predictions
**** Store championship predictions in a MongoDB collection
**** Write Django "View" to retrieve latest championship predictions
**** Create frontend component to display updated predictions
**** Provide confidence intervals for each team’s championship odds
**** Enable visualization of probability changes throughout the season
**** Log prediction errors and refine ML model training data

*** FR22 - ML.Display_Champion
**** Design UI component to showcase predicted NBA champion
**** Implement historical comparison feature (e.g., last 5 seasons)
**** Add graph visualization for championship odds fluctuation
**** Display reasoning behind ML prediction (e.g., key player stats)
**** Optimize query performance for fast retrieval of predictions
**** Enable filtering predictions based on player injuries or trades
**** Allow user to compare ML predictions vs expert analyst picks
**** Test UI responsiveness on mobile and desktop versions

** Log ML Performance (FR23 - FR24)
*** FR23 - ML.Compare
**** Retrieve past game results and compare with ML predictions
**** Develop automated script to generate accuracy reports
**** Store accuracy metrics in a database for long-term analysis
**** Display ML accuracy trends on the admin dashboard
**** Implement backend logic to flag consistently inaccurate predictions
**** Enable automatic retraining of ML models based on error rates
**** Provide real-time visualization of prediction confidence vs accuracy
**** Log misclassified outcomes and provide explanations for failures

*** FR24 - ML.Feedback_Loop
**** Design mechanism to retrain ML models with new season data
**** Implement periodic model evaluations based on stored accuracy data
**** Store model performance scores and hyperparameters in DB
**** Develop admin interface to manually trigger model retraining
**** Optimize ML retraining process to avoid service downtime
**** Introduce adaptive learning techniques for improving model predictions
**** Implement real-time feedback system for users to rate prediction quality
**** Develop ML monitoring tools to detect anomalies in prediction trends

** Statistics Filtering (FR25 - FR28)
*** FR25 - Filter Criteria Display
**** Implement filtering UI
**** Validate filtering logic with tests
**** Connect filters to visualization

*** FR26 - Filter Dynamic Update
**** Optimize database queries
**** Ensure real-time updates
**** Optimize filter performance

*** FR27 - Filter Multiple Criteria
**** Add multiple filtering options

*** FR28 - Filter Reset
**** Implement reset filter option


@endwbs


