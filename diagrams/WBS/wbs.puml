@startwbs WBS
* Basketify (Full Stack Machine Learning Application)

** User Registration (FR1)
*** Design registration UI
*** Implement form validation
*** Develop backend API
*** Store credentials securely
*** Implement email verification
*** Handle errors and feedback
*** Write unit tests
*** Deploy and test

** User Login (FR2)
*** Develop login UI
*** Implement authentication (JWT/Sessions)
*** Verify credentials with DB
*** Hash and verify passwords
*** Handle incorrect login attempts
*** Implement session persistence
*** Develop password reset feature
*** Test login scenarios


** Main Dashboard (FR4 - FR6)
*** Describe objects on dashboard
*** Design layout of dashboard in Figma diagram
*** Write frontend for dashboard (HTML/CSS)

*** FR4 - Dashboard.Search_Connection
**** Create frontend search widget
**** Style dashboard to display widget in a large, visible place
**** Route user to search page for onlick of widget
**** Write Activity / UI test cases

*** FR5 - Dashboard.Favourite_Team_Shortcut
**** Store user's favourite team in DB
**** Write Django "Model" to store user and their favourite team
**** Write Django "View" to retive favourite team into Model
**** Set return of Django View as JSON object
**** Set Django URL Pattern to call Django View when path 'get-fave-team/{username}' is accessed
**** Create frontend favourite team widget
**** Style dashboard to display widget in a large, visible place
**** Set widget onlick to route to get-fave-team/{username} path
**** Route user to stats page for fave team value retrieved
**** Write unit test cases for Django View function
**** Write Activity / UI test cases

*** FR6 - Dashboard.Favourite_Player_Shortcut
**** Store user's favourite player in DB
**** Write Django "Model" to store user and their fave player
**** Write Django "View" to retrieve fave player into Model
**** Set return of Django View as JSON object
**** Set Django URL Pattern to call Django View when path 'get-fave-player/{username}' is accessed
**** Create frontend favourite player widget
**** Style dashboard to display widget in a large, visible place
**** Set widget onlick to route to get-fave-player/{username} path
**** Route user to stats page for fave player value retrieved
**** Write unit test cases for Django View function
**** Write Activity / UI test cases


** Search Interface (FR7 - FR8)
*** Write frontend for fillable search bar
*** Write user instructions: Describe wildcard matching on search page

*** FR7 - Search.Player
**** Setup MongoDB Collection for player names
**** Write server-side function to pull player names from nba_api
**** Schedule server-side function to run every 24 hours & update Collection
**** Write Django "Model" to contain player names
**** Write Django "View" to retrieve matching player names given regex into Model
**** Set return of Django View as JSON object of matching player names
**** Set Django URL Pattern to call Django View when path 'get-players/{regex}' is accessed
**** Create frontend list to display player names
**** Style frontend list of players to be clickable and displayed well
**** For each player name in list, set onlick to route to stats for that player "player-stats/{player_name}"
**** Write unit test cases for Django View function (retrieve player names from regex)
**** Write Activity / UI test cases

*** FR8 - Search.Team
**** Setup MongoDB Collection for team names
**** Write server-side function to pull team names from nba_api
**** Schedule server-side function to run every 24 hours & update Collection
**** Write Django "Model" to contain team names
**** Write Django "View" to retrieve matching team names given regex into Model
**** Set return of Django View as JSON object of matching team names
**** Set Django URL Pattern to call Django View when path 'get-team/{regex}' is accessed
**** Create frontend list to display team names
**** Style frontend list of team to be clickable and displayed well
**** For each team name in list, set onlick to route to stats for that team "team-stats/{team}"
**** Write unit test cases for Django View function (retrieve team names from regex)
**** Write Activity / UI test cases


** Data Visualization (FR9 - FR15)
*** FR9 - Display.Table
**** Setup MongoDB Collection for player stats for one season
**** Setup MongoDB COllection for team stats for one season
**** Write server-side function to pull player stats from nba_api
**** Write server-side function to pull team stats from nba_api
**** Schedule server-side functions to run every 24 hours & update Collections
**** Write Django "Model" to contain player stats
**** Write Django "Model" to contain team stats
**** Write Django "View" to retrieve stats for a given player in latest season into Model
**** Write Django "View" to retrieve stats for a given team in latest season into Model
**** Set return of Django View as JSON object of stats
**** Set Django URL Pattern to call Django View when path 'get-player-stats/{player_name}/{season}' is accessed
**** Set Django URL Pattern to call Django View when path 'get-team-stats/{team_name}/{season}' is accessed
**** Create frontend table to display retrieved stats for the player/team in one season
**** Write unit test cases for player Django View function (retrieve player stats given their name)
**** Write unit test cases for team Django View function (retrieve team stats given their name)
**** Write Activity / UI test cases for player stats
**** Write Activity / UI test cases for team stats

*** FR10 - Table.Time_Window
**** Create frontend dropdown/widget to select game or season basis for the player/team
**** Write Django "View" to retrieve seasonally-based stats for player into Model
**** Write Django "View" to retrieve seasonally-based stats for team into Model
**** Set value=='season-basis' of widget to direct user to path 'get-player-stats/{player_name}/seasonal'
**** Set value=='season-basis' of widget to direct user to path 'get-team-stats/{team_name}/seasonal'
**** Create frontend table to display player/team stats on seasonal basis
**** Fill frontend table with retrieved stats when page loaded
**** Write unit test cases for player Django View function (retrieve player stats on seasonal basis)
**** Write unit test cases for team Django View function (retrieve team stats on seasonal basis)
**** Write Activity / UI test cases for player seasonal stats
**** Write Activity / UI test cases for team seasonal stats

*** FR11 - Display.Graph
**** Create frontend widget to select stats view in table or graph format
**** Set onClick of widget to direct user to path of current + '/graph'
**** Create frontend graph display area
**** Create frontend list of stats to select from
**** Create frontend widget to select to view stats on game or season basis
**** Write Activity / UI test cases for navigating to blank stats graph

*** FR12 - Graph.Select_Stat
**** Write Django "Model" to contain player time-series stats
**** Write Django "Model" to contain team time-series stats
**** Write Django "View" to retrieve player time-series stats into Model based on player name
**** Write Django "View" to retrieve team time-series stats into Model based on team name
**** Set onClick of stats selector to append '/{stat_name}' to path
**** Restrict user from having more than 2 stats selected at a time
**** Display 2 y-axes if 2 stats are selected
**** Display time series of selected stats when page is loaded
**** Style the graph: titles given selected stats, coloring of series, legend

*** FR13 - Graph.Deselect_Stat
**** Set variable holding selected stats based on path
**** Add checkSelected(stat_name) JS function: return true if stat_name currently selected
**** Set onClick of stats selector to remove {stat_name} from path if checkSelected(stat_name) is true

*** FR14 - Graph.Hover
**** Use Plotly.js to display graph of stats
**** Config Plotly.js graph to be hoverable
**** Style graph hover box to show axes values
**** Handle case for 2 stats being displayed (2 y-axis values)

*** FR15 - Graph.Time_Window
**** Write Django "Model" to contain player or team time-series stat on seasonal basis
**** Write Django "View" to retrieve player time-series seasonal stat into Model based on player name
**** Write Django "View" to retrieve team time-series seasonal stat into Model based on team name
**** Create frontend widget for user to select to view stat(s) on a game or seasonal basis
**** Set widget onClick to append/remove '/seasonal' to current path
**** Scale x-axis to fit only seasons the player/team have been active


** Player/Team Forecast (FR16 - FR18)
*** Develop forecast UI
*** Integrate backend ML model
*** Preprocess historical data
*** Train/test ML model
*** Display predictions dynamically
*** Implement accuracy logging
*** Optimize real-time processing
*** Validate predictions with actual results

** Predict Win/Loss (FR19 - FR20)
*** Implement win/loss UI
*** Develop ML model for predictions
*** Fetch team statistics
*** Train model with past match data
*** Display prediction results
*** Implement real-time updates
*** Compare with actual game results
*** Conduct A/B testing on models

** Predict NBA Champion (FR21 - FR22)
*** Implement championship prediction UI
*** Train ML model for season forecast
*** Collect historical championship data
*** Evaluate long-term model accuracy
*** Display season-long predictions
*** Update model inputs dynamically
*** Handle season anomalies
*** Validate model results

** Log ML Performance (FR23 - FR24)
*** Implement ML logging system
*** Store actual vs predicted results
*** Develop performance reports
*** Train models based on feedback
*** Optimize retraining frequency
*** Implement error tracking
*** Ensure logging efficiency
*** Conduct ML audits

** Statistics Filtering (FR25 - FR28)
*** Implement filtering UI
*** Add multiple filtering options
*** Optimize database queries
*** Connect filters to visualization
*** Ensure real-time updates
*** Implement reset filter option
*** Optimize filter performance
*** Validate filtering logic with tests

@endwbs


