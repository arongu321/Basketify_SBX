@startuml
title Dependency Analysis Diagram
left to right direction
skinparam rectangle {
  BackgroundColor LightSteelBlue
  BorderColor Black
  BorderThickness 1
  Shadowing true
}

' FR1: User Registration
rectangle "FR1: User.Register" as FR1 {
  rectangle "Design registration form UI in Figma" as FR1_1
  rectangle "Create registration form using React" as FR1_2
  rectangle "Implement form validation" as FR1_3
  rectangle "Create user database schema for MongoDB" as FR1_4
  rectangle "Develop backend API for registration using Django" as FR1_5
  rectangle "Store credentials securely in MongoDB database" as FR1_6
  rectangle "Implement email verification" as FR1_7
  rectangle "Ensure email uniqueness in the database" as FR1_8
  rectangle "Encrypt and store user passwords" as FR1_9
  rectangle "Add user notifications of successful registration" as FR1_10
  rectangle "Handle form errors and display form error messages for users" as FR1_11
  rectangle "Write unit tests for user registration" as FR1_12

  FR1_1 --> FR1_2
  FR1_2 --> FR1_3
  FR1_4 --> FR1_5
  FR1_4 --> FR1_8
  FR1_5 --> FR1_6
  FR1_6 --> FR1_7
  FR1_8 --> FR1_9
  FR1_9 --> FR1_10
  FR1_3 --> FR1_11
  FR1_5 --> FR1_12
  FR1_2 --> FR1_12

}

' FR2: User Login
rectangle "FR2: User.Login" as FR2 {
  rectangle "Design login form UI in Figma" as FR2_1
  rectangle "Create login form using React" as FR2_2
  rectangle "Implement backend for login authentication using Django" as FR2_3
  rectangle "Verify credentials with database" as FR2_4
  rectangle "Hash and verify passwords" as FR2_5
  rectangle "Handle incorrect login attempts through error messages" as FR2_6
  rectangle "Secure login form against injection attacks" as FR2_7
  rectangle "Manage sessions for logged-in users" as FR2_8
  rectangle "Implement session persistence" as FR2_9
  rectangle "Audit login attempts (successful/failed)" as FR2_10
  rectangle "Develop password reset feature" as FR2_11
  rectangle "Provide account lockout mechanism after multiple failed attempts" as FR2_12
  rectangle "Test login scenarios with existing and non-existing users" as FR2_13

  FR1_4 --> FR2_3
  FR2_1 --> FR2_2
  FR2_3 --> FR2_4
  FR2_3 --> FR2_5
  FR2_5 --> FR2_6
  FR2_5 --> FR2_7
  FR2_3 --> FR2_8
  FR2_8 --> FR2_9
  FR2_9 --> FR2_10
  FR2_2 --> FR2_11
  FR2_3 --> FR2_11
  FR2_10 --> FR2_12
  FR2_2 --> FR2_13
  FR2_3 --> FR2_13
  FR2_4 --> FR2_13
  FR2_5 --> FR2_13
}

' FR3: User.ChangeEmailPassword
rectangle "FR3: User.ChangeEmailPassword" as FR3 {
  rectangle "Design password and email reset request form in Figma" as FR3_1
  rectangle "Generate secure tokens for password and email reset links" as FR3_2
  rectangle "Send reset links via email to registered users" as FR3_3
  rectangle "Validate password strength" as FR3_4
  rectangle "Add confirmation message for new email" as FR3_5
  rectangle "Add confirmation message for new password" as FR3_6
  rectangle "Check if unique email and/or password are created" as FR3_7
  rectangle "Notify users about successful password and/or email changes" as FR3_8
  rectangle "Handle token expiration and invalidation scenarios" as FR3_9
  rectangle "Implement backend for password and email updates" as FR3_10
  rectangle "Integrate security of password and email management workflows" as FR3_11

  FR2_1 --> FR3_1
  FR3_1 --> FR3_2
  FR3_2 --> FR3_3
  FR3_1 --> FR3_4
  FR3_1 --> FR3_5
  FR3_1 --> FR3_6
  FR1_4 --> FR3_7
  FR3_1 --> FR3_8
  FR3_3 --> FR3_8
  FR3_2 --> FR3_9
  FR3_3 --> FR3_10
  FR3_7 --> FR3_10
  FR3_10 --> FR3_11
}

' FR4: Dashboard.Search_Connection
rectangle "FR4: Dashboard.Search_Connection" as FR4 {
  rectangle "Describe objects on dashboard" as FR4_1
  rectangle "Design layout of dashboard in Figma diagram" as FR4_2
  rectangle "Write frontend for dashboard (HTML/CSS)" as FR4_3
  rectangle "Create frontend search widget" as FR4_4
  rectangle "Style dashboard to display widget in a large, visible place" as FR4_5
  rectangle "Route user to search page for onlick of widget" as FR4_6
  rectangle "Write Activity / UI test cases" as FR4_7

  FR4_1 --> FR4_2
  FR4_2 --> FR4_3
  FR4_3 --> FR4_5
  FR4_4 --> FR4_5
  FR4_5 --> FR4_7
  FR4_6 --> FR4_7
}

' FR5: Dashboard.Favourite_Team_Shortcut
rectangle "FR5: Dashboard.Favourite_Team_Shortcut" as FR5 {
  rectangle "Store user's favourite team in DB" as FR5_1
  rectangle "Write Django 'Model' to store user and their favourite team" as FR5_2
  rectangle "Write Django 'View' to retrieve favourite team into Model" as FR5_3
  rectangle "Set return of Django View as JSON object" as FR5_4
  rectangle "Set Django URL Pattern to call Django View when path 'get-fave-team/{username}' is accessed" as FR5_5
  rectangle "Create frontend favourite team widget" as FR5_6
  rectangle "Style dashboard to display widget in a large, visible place" as FR5_7
  rectangle "Set widget onclick to route to get-fave-team/{username} path" as FR5_8
  rectangle "Route user to stats page for fave team value retrieved" as FR5_9
  rectangle "Write unit test cases for Django View function" as FR5_10
  rectangle "Write Activity / UI test cases" as FR5_11

  FR5_1 --> FR5_2
  FR5_2 --> FR5_3
  FR5_3 --> FR5_5
  FR5_6 --> FR5_7
  FR5_6 --> FR5_8
  FR5_3 --> FR5_10
  FR5_5 --> FR5_11
  FR5_8 --> FR5_11
  FR5_9 --> FR5_11
}

' FR6: Dashboard.Favourite_Player_Shortcut
rectangle "FR6: Dashboard.Favourite_Player_Shortcut" as FR6 {
  rectangle "Store user's favourite player in DB" as FR6_1
  rectangle "Write Django 'Model' to store user and their fave player" as FR6_2
  rectangle "Write Django 'View' to retrieve fave player into Model" as FR6_3
  rectangle "Set return of Django View as JSON object" as FR6_4
  rectangle "Set Django URL Pattern to call Django View when path 'get-fave-player/{username}' is accessed" as FR6_5
  rectangle "Create frontend favourite player widget" as FR6_6
  rectangle "Style dashboard to display widget in a large, visible place" as FR6_7
  rectangle "Set widget onclick to route to get-fave-player/{username} path" as FR6_8
  rectangle "Route user to stats page for fave player value retrieved" as FR6_9
  rectangle "Write unit test cases for Django View function" as FR6_10
  rectangle "Write Activity / UI test cases" as FR6_11

  FR6_1 --> FR6_2
  FR6_2 --> FR6_3
  FR6_3 --> FR6_5
  FR6_6 --> FR6_7
  FR6_6 --> FR6_8
  FR6_3 --> FR6_10
  FR6_5 --> FR6_11
  FR6_8 --> FR6_11
  FR6_9 --> FR6_11
}

rectangle "Write frontend for fillable search bar" as FR7_and_8_1
rectangle "Write user instructions: Describe wildcard matching on search page" as FR7_and_8_2

' FR7: Search.Player
rectangle "FR7: Search.Player" as FR7 {
  rectangle "Setup MongoDB Collection for player names" as FR7_1
  rectangle "Write server-side function to pull player names from nba_api" as FR7_2
  rectangle "Schedule server-side function to run every 24 hours & update Collection" as FR7_3
  rectangle "Write Django 'Model' to contain player names" as FR7_4
  rectangle "Write Django 'View' to retrieve matching player names given regex into Model" as FR7_5
  rectangle "Set return of Django View as JSON object of matching player names" as FR7_6
  rectangle "Set Django URL Pattern to call Django View when path 'get-players/{regex}' is accessed" as FR7_7
  rectangle "Create frontend list to display player names" as FR7_8
  rectangle "Style frontend list of players to be clickable and displayed well" as FR7_9
  rectangle "For each player name in list, set onclick to route to stats for that player 'player-stats/{player_name}'" as FR7_10
  rectangle "Write unit test cases for Django View function" as FR7_11
  rectangle "Write Activity / UI test cases" as FR7_12

  FR7_and_8_1 --> FR7_7
  FR7_1 --> FR7_2
  FR7_2 --> FR7_3
  FR7_1 --> FR7_4
  FR7_4 --> FR7_5
  FR7_5 --> FR7_7
  FR7_8 --> FR7_9
  FR7_8 --> FR7_10
  FR7_5 --> FR7_11
  FR7_6 --> FR7_12
  FR7_10 --> FR7_12
}

' FR8: Search.Team
rectangle "FR8: Search.Team" as FR8 {
  rectangle "Setup MongoDB Collection for team names" as FR8_1
  rectangle "Write server-side function to pull team names from nba_api" as FR8_2
  rectangle "Schedule server-side function to run every 24 hours & update Collection" as FR8_3
  rectangle "Write Django 'Model' to contain team names" as FR8_4
  rectangle "Write Django 'View' to retrieve matching team names given regex into Model" as FR8_5
  rectangle "Set return of Django View as JSON object of matching team names" as FR8_6
  rectangle "Set Django URL Pattern to call Django View when path 'get-team/{regex}' is accessed" as FR8_7
  rectangle "Create frontend list to display team names" as FR8_8
  rectangle "Style frontend list of team to be clickable and displayed well" as FR8_9
  rectangle "For each team name in list, set onclick to route to stats for that team 'team-stats/{team}'" as FR8_10
  rectangle "Write unit test cases for Django View function" as FR8_11
  rectangle "Write Activity / UI test cases" as FR8_12

  FR7_and_8_1 --> FR8_7
  FR8_1 --> FR8_2
  FR8_2 --> FR8_3
  FR8_1 --> FR8_4
  FR8_4 --> FR8_5
  FR8_5 --> FR8_7
  FR8_8 --> FR8_9
  FR8_8 --> FR8_10
  FR8_5 --> FR8_11
  FR8_6 --> FR8_12
  FR8_10 --> FR8_12
}

' FR9: Display.Table
rectangle "FR9: Display.Table" as FR9 {
  rectangle "Setup MongoDB Collection for player & team stats for one season" as FR9_1
  rectangle "Write server-side function to pull player & team stats from nba_api" as FR9_2
  rectangle "Schedule server-side functions to run every 24 hours & update Collections" as FR9_3
  rectangle "Write Django 'Model' to contain player & team stats" as FR9_4
  rectangle "Write Django 'View' to retrieve stats for a given player & team in latest season into Model" as FR9_5
  rectangle "Set return of Django View as JSON object of stats" as FR9_6
  rectangle "Set Django URL Pattern to call Django View when path 'get-player(team)-stats/{player_name}/{season}' is accessed" as FR9_7
  rectangle "Create frontend table to display retrieved stats for the player/team in one season" as FR9_8
  rectangle "Write unit test cases for player Django View function" as FR9_9
  rectangle "Write Activity / UI test cases for player & team stats" as FR9_10

  FR9_1 --> FR9_2
  FR9_2 --> FR9_3
  FR9_4 --> FR9_5
  FR9_5 --> FR9_6
  FR9_5 --> FR9_7
  FR9_5 --> FR9_9
  FR9_7 --> FR9_10
  FR9_8 --> FR9_10
}

' FR10: Table.Time_Window
rectangle "FR10: Table.Time_Window" as FR10 {
  rectangle "Create frontend dropdown/widget to select game or season basis for the player/team" as FR10_1
  rectangle "Write Django 'View' to retrieve seasonally-based stats for player into Model" as FR10_2
  rectangle "Write Django 'View' to retrieve seasonally-based stats for team into Model" as FR10_3
  rectangle "Set value=='season-basis' of widget to direct user to path 'get-player-stats/{player_name}/seasonal'" as FR10_4
  rectangle "Set value=='season-basis' of widget to direct user to path 'get-team-stats/{team_name}/seasonal'" as FR10_5
  rectangle "Create frontend table to display player/team stats on seasonal basis" as FR10_6
  rectangle "Fill frontend table with retrieved stats when page loaded" as FR10_7
  rectangle "Write unit test cases for player Django View function" as FR10_8
  rectangle "Write unit test cases for team Django View function" as FR10_9
  rectangle "Write Activity / UI test cases for player seasonal stats" as FR10_10
  rectangle "Write Activity / UI test cases for team seasonal stats" as FR10_11

  FR10_1 --> FR10_2
  FR10_1 --> FR10_3
  FR10_4 --> FR10_6
  FR10_5 --> FR10_6
  FR10_6 --> FR10_7
  FR10_2 --> FR10_8
  Fr10_3 --> FR10_9
  FR10_4 --> FR10_10
  FR10_5 --> FR10_11
  FR10_6 --> FR10_10
  FR10_6 --> FR10_11
}

' FR11: Display.Graph
rectangle "FR11: Display.Graph" as FR11 {
  rectangle "Create frontend widget to select stats view in table or graph format" as FR11_1
  rectangle "Set onClick of widget to direct user to path of current + '/graph'" as FR11_2
  rectangle "Create frontend graph display area" as FR11_3
  rectangle "Create frontend list of stats to select from" as FR11_4
  rectangle "Create frontend widget to select to view stats on game or season basis" as FR11_5
  rectangle "Write Activity / UI test cases for navigating to blank stats graph" as FR11_6

  FR11_1 --> FR11_2
  FR11_2 --> FR11_6
  FR11_3 --> FR11_6
  FR11_4 --> FR11_6
  FR11_5 --> FR11_6
}

' FR12: Graph.Select_Stat
rectangle "FR12: Graph.Select_Stat" as FR12 {
  rectangle "Write Django 'Model' to contain player time-series stats" as FR12_1
  rectangle "Write Django 'Model' to contain team time-series stats" as FR12_2
  rectangle "Write Django 'View' to retrieve player time-series stats into Model based on player name" as FR12_3
  rectangle "Write Django 'View' to retrieve team time-series stats into Model based on team name" as FR12_4
  rectangle "Set onClick of stats selector to append '/{stat_name}' to path" as FR12_5
  rectangle "Restrict user from having more than 2 stats selected at a time" as FR12_6
  rectangle "Display 2 y-axes if 2 stats are selected" as FR12_7
  rectangle "Display time series of selected stats when page is loaded" as FR12_8
  rectangle "Style the graph: titles given selected stats, coloring of series, legend" as FR12_9

  FR12_1 --> FR12_3
  FR12_2 --> FR12_4
  FR11_4 --> FR12_6
  FR12_5 --> FR12_7
  FR12_5 --> FR12_8
  FR12_8 --> FR12_9
}

' FR13: Graph.Deselect_Stat
rectangle "FR13: Graph.Deselect_Stat" as FR13 {
  rectangle "Set variable holding selected stats based on path" as FR13_1
  rectangle "Add checkSelected(stat_name) JS function: return true if stat_name currently selected" as FR13_2
  rectangle "Set onClick of stats selector to remove {stat_name} from path if checkSelected(stat_name) is true" as FR13_3

  FR13_1 --> FR11_4
  FR13_1 --> FR13_2
  FR13_2 --> FR13_3
}

' FR14: Graph.Hover
rectangle "FR14: Graph.Hover" as FR14 {
  rectangle "Use Plotly.js to display graph of stats" as FR14_1
  rectangle "Config Plotly.js graph to be hoverable" as FR14_2
  rectangle "Style graph hover box to show axes values" as FR14_3
  rectangle "Handle case for 2 stats being displayed (2 y-axis values)" as FR14_4

  FR14_1 --> FR14_2
  FR14_2 --> FR14_3
  FR12_7 --> FR14_4
  FR14_1 --> FR14_4
}

' FR15: Graph.Time_Window
rectangle "FR15: Graph.Time_Window" as FR15 {
  rectangle "Write Django 'Model' to contain player or team time-series stat on seasonal basis" as FR15_1
  rectangle "Write Django 'View' to retrieve player time-series seasonal stat into Model based on player name" as FR15_2
  rectangle "Write Django 'View' to retrieve team time-series seasonal stat into Model based on team name" as FR15_3
  rectangle "Create frontend widget for user to select to view stat(s) on a game or seasonal basis" as FR15_4
  rectangle "Set widget onClick to append/remove '/seasonal' to current path" as FR15_5
  rectangle "Scale x-axis to fit only seasons the player/team have been active" as FR15_6

  FR15_1 --> FR15_2
  FR15_1 --> FR15_3
  FR15_4 --> FR15_5
  FR15_2 --> FR15_5
  FR15_3 --> FR15_5
}

' FR16: ML Player Prompt
rectangle "FR16: ML.Player_Prompt" as FR16 {
  rectangle "Design UI form for player selection using React" as FR16_1
  rectangle "Implement search functionality for quick player selection" as FR16_2
  rectangle "Validate player name input (handle incorrect, partial, or ambiguous names)" as FR16_3
  rectangle "Write Django View to fetch player's historical game stats from MongoDB" as FR16_4
  rectangle "Develop a data transformation pipeline for preprocessing player stats" as FR16_5
  rectangle "Implement API call to ML model for player performance prediction" as FR16_6
  rectangle "Store ML predictions in MongoDB for caching and analysis" as FR16_7
  rectangle "Display ML predictions dynamically on the frontend" as FR16_8
  rectangle "Implement UI indicators for ML prediction confidence scores" as FR16_9
  rectangle "Handle API errors and implement a retry mechanism for model failures" as FR16_10
  rectangle "Develop backend logging to track incorrect or missing predictions" as FR16_11
  rectangle "Write unit tests for ML integration, frontend updates, and error handling" as FR16_12

  FR16_1 --> FR16_2
  FR16_2 --> FR16_3
  FR16_3 --> FR16_4
  FR16_4 --> FR16_5
  FR16_5 --> FR16_6
  FR16_6 --> FR16_7
  FR16_7 --> FR16_8
  FR16_6 --> FR16_9
  FR16_8 --> FR16_10
  FR16_9 --> FR16_11
  FR16_10 --> FR16_11
  FR16_7 --> FR16_12
  FR16_11 --> FR16_5
  FR16_11 --> FR16_9
  FR16_8 --> FR16_12
  FR16_4 --> FR16_6
  FR16_3 --> FR16_5
}

' FR17: ML Team Prompt
rectangle "FR17: ML.Team_Prompt" as FR17 {
  rectangle "Create UI dropdown to select a team for predictions" as FR17_1
  rectangle "Implement an autofill mechanism for quick team selection" as FR17_2
  rectangle "Validate team selection input (handle incorrect or missing teams)" as FR17_3
  rectangle "Write Django View to fetch team historical performance data" as FR17_4
  rectangle "Develop a pre-processing pipeline to clean and aggregate team statistics" as FR17_5
  rectangle "Implement API call to ML model to generate team forecasts" as FR17_6
  rectangle "Store ML-predicted team stats in MongoDB for retrieval" as FR17_7
  rectangle "Display forecasted team statistics dynamically on the UI" as FR17_8
  rectangle "Implement UI indicators to show ML model confidence intervals" as FR17_9
  rectangle "Handle errors and implement API fallback solutions" as FR17_10
  rectangle "Develop backend monitoring to detect and log incorrect forecasts" as FR17_11
  rectangle "Write unit tests for Django views, ML integration, and UI updates" as FR17_12

  FR17_1 --> FR17_2
  FR17_2 --> FR17_3
  FR17_3 --> FR17_4
  FR17_4 --> FR17_5
  FR17_5 --> FR17_6
  FR17_6 --> FR17_7
  FR17_7 --> FR17_8
  FR17_6 --> FR17_9
  FR17_8 --> FR17_10
  FR17_9 --> FR17_11
  FR17_10 --> FR17_11
  FR17_7 --> FR17_12
  FR17_11 --> FR17_5
  FR17_11 --> FR17_9
  FR17_8 --> FR17_12
  FR17_4 --> FR17_6
  FR17_3 --> FR17_5
}

' FR18: ML Forecast
rectangle "FR18: ML.Forecast" as FR18 {
  rectangle "Setup MongoDB collection for storing forecasted stats" as FR18_1
  rectangle "Write scheduled backend job to update ML forecasts periodically" as FR18_2
  rectangle "Implement version control for ML models to compare different prediction models" as FR18_3
  rectangle "Store ML prediction confidence scores alongside forecasted stats" as FR18_4
  rectangle "Implement real-time performance tracking for ML forecasts" as FR18_5
  rectangle "Develop frontend widget to toggle between actual vs predicted stats" as FR18_6
  rectangle "Enable graph overlays to compare ML-predicted and real-world stats" as FR18_7
  rectangle "Log incorrect predictions to refine and retrain ML models" as FR18_8
  rectangle "Optimize MongoDB queries for efficient retrieval of forecast data" as FR18_9
  rectangle "Develop an admin panel to visualize and monitor ML forecast accuracy" as FR18_10
  rectangle "Implement API to retrieve forecast accuracy history for developers" as FR18_11
  rectangle "Write unit and integration tests for forecast pipeline, caching, and model validation" as FR18_12

  FR18_1 --> FR18_2
  FR18_2 --> FR18_3
  FR18_3 --> FR18_4
  FR18_4 --> FR18_5
  FR18_5 --> FR18_6
  FR18_6 --> FR18_7
  FR18_7 --> FR18_8
  FR18_8 --> FR18_9
  FR18_9 --> FR18_10
  FR18_10 --> FR18_11
  FR18_11 --> FR18_12
  FR18_8 --> FR18_2
  FR18_6 --> FR18_12
  FR18_7 --> FR18_10
  FR18_3 --> FR18_11
  FR18_9 --> FR18_6
}

' FR19: ML Team Prompt (Win/Loss Prediction)
rectangle "FR19: ML.Team_Prompt" as FR19 {
  rectangle "Develop UI dropdown for team selection in win/loss prediction" as FR19_1
  rectangle "Implement an autofill mechanism to enhance UX for selecting teams" as FR19_2
  rectangle "Fetch latest team rosters from nba_api for more accurate predictions" as FR19_3
  rectangle "Develop a pre-processing pipeline for matchup history analysis" as FR19_4
  rectangle "Write Django View to fetch matchup history and win/loss trends" as FR19_5
  rectangle "Implement API call to ML model for win probability calculation" as FR19_6
  rectangle "Store ML-generated win/loss predictions in MongoDB for analysis" as FR19_7
  rectangle "Implement real-time probability updates before game start" as FR19_8
  rectangle "Display confidence percentage alongside predicted outcomes" as FR19_9
  rectangle "Develop frontend UI elements to compare team stats before prediction" as FR19_10
  rectangle "Implement logging and analytics to track ML accuracy over time" as FR19_11
  rectangle "Write unit and integration tests for Django API, ML model, and UI" as FR19_12

  FR19_1 --> FR19_2
  FR19_2 --> FR19_3
  FR19_3 --> FR19_4
  FR19_4 --> FR19_5
  FR19_5 --> FR19_6
  FR19_6 --> FR19_7
  FR19_7 --> FR19_8
  FR19_6 --> FR19_9
  FR19_8 --> FR19_10
  FR19_9 --> FR19_11
  FR19_10 --> FR19_12
  FR19_11 --> FR19_4
  FR19_11 --> FR19_8
  FR19_6 --> FR19_12
  FR19_5 --> FR19_10
  FR19_7 --> FR19_9
}

' FR20: ML Predict Win/Loss
rectangle "FR20: ML.Predict_WinLoss" as FR20 {
  rectangle "Store previous game results and ML predictions for comparison" as FR20_1
  rectangle "Implement backend job to compute ML model prediction success rate" as FR20_2
  rectangle "Develop an API to provide historical win/loss prediction accuracy" as FR20_3
  rectangle "Display UI statistics showing accuracy of previous predictions" as FR20_4
  rectangle "Implement real-time match data fetching to improve ML model accuracy" as FR20_5
  rectangle "Introduce rolling win probability updates for ongoing live games" as FR20_6
  rectangle "Develop a fallback mechanism to reprocess predictions in case of missing data" as FR20_7
  rectangle "Provide pre-match team matchup analysis alongside win probability" as FR20_8
  rectangle "Enable users to compare ML win/loss predictions with expert opinions" as FR20_9
  rectangle "Implement logging for incorrectly predicted games for ML model refinement" as FR20_10
  rectangle "Conduct A/B testing with different ML architectures for optimal prediction" as FR20_11
  rectangle "Write automated tests for ML accuracy, Django views, and UI components" as FR20_12

  FR20_1 --> FR20_2
  FR20_2 --> FR20_3
  FR20_3 --> FR20_4
  FR20_4 --> FR20_5
  FR20_5 --> FR20_6
  FR20_6 --> FR20_7
  FR20_7 --> FR20_8
  FR20_8 --> FR20_9
  FR20_9 --> FR20_10
  FR20_10 --> FR20_11
  FR20_11 --> FR20_12
  FR20_10 --> FR20_2
  FR20_3 --> FR20_6
  FR20_6 --> FR20_7
  FR20_7 --> FR20_9
  FR20_8 --> FR20_12
}

' FR21: ML Predict NBA Champion
rectangle "FR21: ML.Predict_Champion" as FR21 {
  rectangle "Aggregate season-long statistics for all teams in MongoDB" as FR21_1
  rectangle "Implement ML model pipeline to predict playoff progression probabilities" as FR21_2
  rectangle "Develop feature importance analysis to identify key championship predictors" as FR21_3
  rectangle "Store ML-generated championship predictions in MongoDB" as FR21_4
  rectangle "Implement an API to fetch the latest championship projections" as FR21_5
  rectangle "Develop frontend visualizations for championship odds over time" as FR21_6
  rectangle "Implement UI indicators for confidence intervals in champion prediction" as FR21_7
  rectangle "Optimize database queries to retrieve team championship probability efficiently" as FR21_8
  rectangle "Enable visualization of probability fluctuations over the season" as FR21_9
  rectangle "Log incorrect predictions and retrain ML model with updated historical data" as FR21_10
  rectangle "Implement an admin panel to track the performance of the championship predictor" as FR21_11
  rectangle "Write unit tests to validate data integrity in the championship prediction pipeline" as FR21_12

  FR21_1 --> FR21_2
  FR21_2 --> FR21_3
  FR21_3 --> FR21_4
  FR21_4 --> FR21_5
  FR21_5 --> FR21_6
  FR21_6 --> FR21_7
  FR21_7 --> FR21_8
  FR21_8 --> FR21_9
  FR21_9 --> FR21_10
  FR21_10 --> FR21_11
  FR21_11 --> FR21_12
  FR21_10 --> FR21_2
  FR21_4 --> FR21_7
  FR21_6 --> FR21_9
  FR21_3 --> FR21_10
  FR21_7 --> FR21_12
}

' FR22: ML Display NBA Champion
rectangle "FR22: ML.Display_Champion" as FR22 {
  rectangle "Design an interactive UI component to showcase championship predictions" as FR22_1
  rectangle "Implement historical championship comparison (e.g., previous 5 seasons)" as FR22_2
  rectangle "Develop graph visualization to illustrate championship odds fluctuations" as FR22_3
  rectangle "Implement ML explainability features to display reasoning behind predictions" as FR22_4
  rectangle "Optimize Django query performance for fast championship retrieval" as FR22_5
  rectangle "Enable filtering predictions based on key factors (injuries, trades, streaks)" as FR22_6
  rectangle "Provide an option to compare ML predictions against human expert picks" as FR22_7
  rectangle "Display championship insights dynamically based on real-time team performance" as FR22_8
  rectangle "Write UI responsiveness tests to ensure optimal performance on all devices" as FR22_9
  rectangle "Implement caching mechanisms to avoid excessive recomputation" as FR22_10
  rectangle "Log user interactions to analyze most viewed championship insights" as FR22_11
  rectangle "Develop an API for external applications to fetch championship predictions" as FR22_12

  FR22_1 --> FR22_2
  FR22_2 --> FR22_3
  FR22_3 --> FR22_4
  FR22_4 --> FR22_5
  FR22_5 --> FR22_6
  FR22_6 --> FR22_7
  FR22_7 --> FR22_8
  FR22_8 --> FR22_9
  FR22_9 --> FR22_10
  FR22_10 --> FR22_11
  FR22_11 --> FR22_12
  FR22_10 --> FR22_5
  FR22_6 --> FR22_12
  FR22_4 --> FR22_7
  FR22_8 --> FR22_11
  FR22_3 --> FR22_9
}

' FR23: ML Compare
rectangle "FR23: ML.Compare" as FR23 {
  rectangle "Retrieve past game results and ML predictions for comparison" as FR23_1
  rectangle "Develop an automated script to generate ML accuracy reports" as FR23_2
  rectangle "Store prediction accuracy metrics in a dedicated MongoDB collection" as FR23_3
  rectangle "Display ML accuracy trends on the admin dashboard with visualizations" as FR23_4
  rectangle "Implement backend logic to flag consistently inaccurate predictions" as FR23_5
  rectangle "Develop a monitoring system to identify degrading ML performance" as FR23_6
  rectangle "Automate accuracy validation with real-time prediction comparisons" as FR23_7
  rectangle "Implement alerts for sudden accuracy drops in ML models" as FR23_8
  rectangle "Enable developers to request re-evaluation of past predictions" as FR23_9
  rectangle "Log errors and incorrect forecasts for debugging and retraining" as FR23_10
  rectangle "Write API to expose ML performance metrics for external integrations" as FR23_11
  rectangle "Implement scheduled reports on model performance improvements" as FR23_12

  FR23_1 --> FR23_2
  FR23_2 --> FR23_3
  FR23_3 --> FR23_4
  FR23_4 --> FR23_5
  FR23_5 --> FR23_6
  FR23_6 --> FR23_7
  FR23_7 --> FR23_8
  FR23_8 --> FR23_9
  FR23_9 --> FR23_10
  FR23_10 --> FR23_11
  FR23_11 --> FR23_12
  FR23_10 --> FR23_2
  FR23_3 --> FR23_6
  FR23_4 --> FR23_8
  FR23_7 --> FR23_10
  FR23_5 --> FR23_12
}

' FR24: ML Feedback Loop
rectangle "FR24: ML.Feedback_Loop" as FR24 {
  rectangle "Design ML retraining workflows based on accuracy feedback" as FR24_1
  rectangle "Implement periodic evaluations of stored prediction accuracy data" as FR24_2
  rectangle "Store ML model hyperparameters and version control history" as FR24_3
  rectangle "Develop an admin interface to manually trigger model retraining" as FR24_4
  rectangle "Optimize ML retraining to ensure minimal downtime in live predictions" as FR24_5
  rectangle "Introduce self-learning mechanisms for continuous ML improvement" as FR24_6
  rectangle "Implement real-time user feedback on ML predictions for refinement" as FR24_7
  rectangle "Develop alert system for anomalies detected in ML performance trends" as FR24_8
  rectangle "Implement comparison of different ML retraining strategies" as FR24_9
  rectangle "Store retrained model logs for auditing and debugging" as FR24_10
  rectangle "Write automated tests for feedback integration in ML retraining pipeline" as FR24_11

  FR24_1 --> FR24_2
  FR24_2 --> FR24_3
  FR24_3 --> FR24_4
  FR24_4 --> FR24_5
  FR24_5 --> FR24_6
  FR24_6 --> FR24_7
  FR24_7 --> FR24_8
  FR24_8 --> FR24_9
  FR24_9 --> FR24_10
  FR24_10 --> FR24_11
  FR24_10 --> FR24_2
  FR24_6 --> FR24_9
  FR24_3 --> FR24_8
  FR24_7 --> FR24_11
  FR24_5 --> FR24_10
}

' FR25: Filter Criteria Display
rectangle "FR25 - Filter.Criteria_Display" as FR25 {
  rectangle "Design filtering UI in Figma" as FR25_1
  rectangle "Create filtering section for displaying stats in React" as FR25_2
  rectangle "Implement team-specific filters (by conference, division, etc.) in React" as FR25_3
  rectangle "Implement segment-based filters (by month, last N games, pre/post all-star) in React" as FR25_4
  rectangle "Implement season type filter" as FR25_5
  rectangle "Implement game scenario-based filters (by quarter, win/loss, game halves)" as FR25_6
  rectangle "Implement year filter (e.g., 2018-19, 2019-20, etc.)" as FR25_7
  rectangle "Implement date range filter" as FR25_8
  rectangle "Implement filters to display basic or advanced stats" as FR25_9
  rectangle "Add option to select specific columns to display (points, rebounds, team name, etc.)" as FR25_10
  rectangle "Validate filtering logic with tests" as FR25_11
  rectangle "Add backend logic to connect filters to update visualized results" as FR25_12
  rectangle "Provide feedback messages when no results show" as FR25_13

  FR25_1 --> FR25_2
  FR25_2 --> FR25_3
  FR25_2 --> FR25_4
  FR25_2 --> FR25_5
  FR25_2 --> FR25_6
  FR25_2 --> FR25_7
  FR25_2 --> FR25_8
  FR25_2 --> FR25_9
  FR25_2 --> FR25_10
  FR25_2 --> FR25_11
  FR25_10 --> FR25_11
  FR25_2 --> FR25_12
  FR25_12 --> FR25_13
}

' FR26: Filter.Dynamic_Update
rectangle "FR26: Filter.Dynamic_Update" as FR26 {
  rectangle "Optimize database queries" as FR26_1
  rectangle "Implement real-time updates upon user selection" as FR26_2
  rectangle "Cache result of frequently used filters for optimized performance" as FR26_3
  rectangle "Optimize filter performance using lazy loading and/or pagination" as FR26_4
  rectangle "Check for consistency between filtered results and graph view" as FR26_5
  rectangle "Monitor backend API response time based on filters" as FR26_6
  rectangle "Create automated UI and backend tests for filter updates" as FR26_7
  rectangle "Display filtered results on page" as FR26_8

  FR25_12 --> FR26_8
  FR26_8 -> FR26_2
  FR26_2 --> FR26_1
  FR26_2 --> FR26_3
  FR26_2 --> FR26_4
  FR26_2 --> FR26_5
  FR26_2 --> FR26_6
  FR26_6 --> FR26_7
}

' FR27: Filter.Multiple_Criteria
rectangle "FR27: Filter.Multiple_Criteria" as FR27 {
  rectangle "Add multiple filtering options in UI" as FR27_1
  rectangle "Implement backend logic to combine multiple filters" as FR27_2
  rectangle "Display selected filters for user" as FR27_3
  rectangle "Allow users to modify filters without affecting other filters" as FR27_4
  rectangle "Integrate automated UI and backend tests for multiple filters" as FR27_5
  rectangle "Ensure filtering does not break when user switches to other webpages" as FR27_6
  rectangle "Use indexing to optimize queries with multiple filters" as FR27_7
  rectangle "Log filters used to see results" as FR27_8
  rectangle "Add option for user to view recently used filters" as FR27_9

  FR25_1 --> FR27_1
  FR27_1 --> FR27_2
  FR27_1 --> FR27_3
  FR27_1 --> FR27_4
  FR27_1 --> FR27_5
  FR27_2 --> FR27_5
  FR27_2 --> FR27_6
  FR27_2 --> FR27_7
  FR27_2 --> FR27_8
  FR27_8 --> FR27_9
  FR27_1 --> FR27_9
}

' FR28: Filter.Reset
rectangle "FR28: Filter.Reset" as FR28 {
  rectangle "Add reset filter option in UI" as FR28_1
  rectangle "Ensure reset filter defaults to using no filters" as FR28_2
  rectangle "Handle UI updates dynamically upon reset without reloading" as FR28_3
  rectangle "Implement backend logic to clear filters in a session" as FR28_4
  rectangle "Ensure reset filter syncs with tabular and graph views (stats displayed with no filters)" as FR28_5
  rectangle "Add automated UI and backend tests for filter resetting" as FR28_6
  rectangle "Add message to confirm reset of filters" as FR28_7
  rectangle "Test reset filter with different result combinations (for small and large results)" as FR28_8

  FR25_1 --> FR28_1
  FR28_1 --> FR28_2
  FR25_12 --> FR28_3
  FR28_1 --> FR28_4
  FR28_1 --> FR28_5
  FR25_12 --> FR28_5
  FR28_4 --> FR28_6
  FR28_5 --> FR28_6
  FR28_4 --> FR28_7
  FR28_6 --> FR28_8
  FR25_12 --> FR28_8

}

@enduml

