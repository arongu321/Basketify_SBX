@startuml RegistrationAndLogin
title Registration and Login Activity Diagram (FR1-FR3)
|#LightBlue|Email System|
|#LightSeaGreen|Frontend System|
|#LightCoral|User|
|#LightYellow|Database|
|#LightPink|Backend System|

|User|
start
  :Request Registration;
|Backend System|
repeat
repeat
:Redirect to Registration Form;
|Frontend System|
:Display Regiatration Form;
|User|
:Fill Email and Password In Form;
:Submit Registration Form;
|Frontend System|
:Validate Email and Password;
|Database|
:Check if Email Already Exists;
|Frontend System|
backward :Display Email Error Message;
repeat while (Valid and Unique Email?) is (No) 
-> Yes;
backward :Display Password Error Message;
repeat while (Valid Password?) is (No)
-> Yes;
:Encrypt Password;
|Database|
:Store Email and Password Credentials;
:Create Username for Specified Email;
|Email System|
:Send Email about Newly Created Username to User;
|Backend System|
:Redirect to Login Page;

|Frontend System|
:Display Login Page;
repeat
if (Change Password?) then (yes)
    :Request Password Change;
    |Frontend System|
    repeat
    :Redirect to Change Password Form;
    |User|
    :Enter Current Password;
    fork
        :Re-Confirm Current Password;
    fork again
        |Database|
        :Retrieve Current Encrypted Password for User;

        |Backend System|
        :Decrypt Password;
    end fork
    |Frontend System|
    backward :Display Passwords Non-Matching Error;
    repeat while (Password Confirmation Passed and Password Matches Corresponding User?) is (no)
    -> yes;
    repeat
    |User|
    :Enter New Password Twice(2nd time for Confirmation);
    backward :Invalid New Password Error;
    repeat while (New Password Valid?) is (no)
    -> yes;
    fork
        |Frontend System|
        :Display Password Change Success Message;
    fork again
        |Backend System|
        :Encrypt New Password;
        |Database|
        :Update New Encrypted Password for User;
    fork again
        |Email System|
        :Email User Password Change Confirmation;
    end fork
    |Backend System|
    :Redirect to Login Page;
    |Frontend System|
    :Display Login Page;
else (no)
endif
repeat while (Enter Login Credentials?) is (no)
-> yes;
|User|
:Request Login;
|Frontend System|
repeat
:Redirect to Login Page;
|User|
:Fill Username and Password on Login Form;
:Submit Login Credentials;
|Database|
:Retrieve Matching Username and Encrypted Password;
|Frontend System|
:Validate Username and Password Credentials;
backward :Display Login Error;
repeat while (Matching Username and Password?) is (no)
-> yes;
:Redirect to Home CMS Page;
stop

@enduml

@startuml DashboardNavigation
|User|
start
:Arrives at Dashboard;

|Frontend System|
if (User is logged in?) then (yes)
    :Display favourite team widget;
    :Display favourite player widget;
    :Display search interface;
    :Display logout button;
else (no)
    :Display search interface;
    :Display login button;
endif

|User|
:Select an Option;

|Frontend System|
switch(Selected Option)
    case (Login)
        if (User is logged in?) then (no)
            |User|
            :Logs into Basketify;
        endif
    case (Search)
        |Frontend System|
        :Redirect to player/team search page;
    case (Favourite Team)
        if (Has a Fave Team) then (yes)
            :Redirect to team statistics;
        else (no)
            :Prompt user to search for and select a favourite team;
            |Backend System|
            :Retrieve list of teams from the database;
            :Send list to frontend;
            |Frontend System|
            :Display search interface for selecting a team;
        endif
    case (Favourite Player)
        if (Has a Fave Player) then (yes)
            :Redirect to player statistics;
        else (no)
            :Prompt user to search for and select a favourite player;
            |Backend System|
            :Retrieve list of players from the database;
            :Send list to frontend;
            |Frontend System|
            :Display search interface for selecting a player;
        endif
    case (Logout)
        :Logout user;
        :Display login button;
endswitch

stop
@enduml

@startuml SearchFunctionality
|User|
start
:Logs into Basketify;
:Opens Search Interface;

|Frontend System|
:Prompt search player or team;

|User|
:Click on player or team button;

|Frontend System|
if (Player or Team?) then (Player)
    :Prompt for player name;
    |User|
    :Enters player name;
    |Frontend System|
    :Parses player name;
    |Database|
    :Retrieves matching players;
else (Team)
    :Prompt for team name;
    |User|
    :Enters team name;
    |Frontend System|
    :Parses team name;
    |Database|
    :Retrieves matching teams;
endif

|Frontend System|
if (Matches found?) then (Yes)
    :Display matching names in list;
    |User|
    :Clicks on entry in list;
    |Frontend System|
    :Redirect to stats view page;
else (No)
    :Show "No results found" message;
endif
stop
@enduml

@startuml DataVisualization
|User|
start
:Logs into Basketify;
:Search for player/team. (See SearchFunctionality diagram);
:Selects a player/team;

|Frontend System|
:Redirect user to stats table for player/team;

|Database|
:Retrieve statistics for player/team;

|Frontend System|
:Display all stats in table;

|User|
if (User clicks button) then ("View seasonal stats" button click)
    |Frontend System|
    :Send request to get seasonal stats;
    |Database|
    :Retrieve seasonal stats for player/team;
    |Frontend System|
    :Display table of stats on seasonal basis;
else ("View graph" button click)
    |User|
    switch(User clicks on?)
        case(Select a new stat)
            |Frontend System|
            :Request stat for player/team;
            |Database|
            :Retrieve stat for player/team;
            |Frontend System|
            :Display stat on graph;
            if (Number stats selected) then ('== 2')
                :Display secondary y-axis on right of graph (different scale);
                :Gray out and disable buttons for non-selected stats;
            endif
            stop
        case(De-select a stat)
            |Frontend System|
            :Remove stat from graph;
            :Re-calculate number of selected stats;
            if (Number stats selected) then ('== 1')
                :Remove secondary y-axis on right of graph (different scale);
            endif
            stop
        case(Toggle seasonal/game-by-game view)
            |Frontend System|
            if (Current view) then (Seasonal view)
                :Request stat(s) for player/team on game-by-game basis for current season;
                |Database|
                :Retrieve stat(s) for current season;
                |Frontend System|
                :Display stat(s) on graph;
            else (Game-by-Game view)
                ::Request stat(s) for player/team on seasonal basis;
                |Database|
                :Retrieve stat(s) for all seasons;
                |Frontend System|
                :Display stat(s) on graph;
            endif
            stop
    endswitch
endif

stop
@enduml

@startuml MachineLearningPredictions
|User|
start
:Logs into Basketify;
:Selects "Predict Player/Team Stats";
:Chooses a player/team;

|Frontend System|
:Processes data with ML model;
|Database|
:Fetches historical performance data;

|Frontend System|
:Generates predicted stats;
:Displays forecasted values with confidence score;
stop
@enduml

@startuml WinLossPrediction
|User|
start
:Logs into Basketify;
:Selects "Predict Match Outcome";
:Chooses a team;

|Frontend System|
:Processes data with ML model;
|Database|
:Fetches team performance history;

|Frontend System|
:Generates win/loss prediction;
:Displays expected winner and confidence score;
stop
@enduml

@startuml PredictNBAChampion
|User|
start
:Logs into Basketify;
:Selects "Predict NBA Champion";

|Frontend System|
:Runs ML model on all teams;
|Database|
:Fetches season performance data;

|Frontend System|
:Generates NBA champion prediction;
:Displays winner with confidence score;
stop
@enduml

@startuml MLPerformanceLogging
|Frontend System|
start
:ML Model makes a prediction;
:Logs prediction in system;

|Database|
:Compares prediction with actual result;
:Calculates accuracy/error rate;

|Frontend System|
:Updates ML feedback loop;
if (Accuracy below threshold?) then (Yes)
    :Retrain model;
else (No)
    :Continue logging performance;
endif
stop
@enduml

@startuml StatisticsFiltering
|User|
start
:Logs into Basketify;
:Opens player/team statistics;
:Chooses filter criteria;

|Frontend System|
:Applies filters;
|Database|
:Retrieves filtered stats;

|Frontend System|
if (Filters applied?) then (Yes)
    :Update displayed statistics;
else (No)
    :Show default view;
endif

if (User resets filters?) then (Yes)
    |Frontend System|
    :Clear applied filters;
    :Show unfiltered statistics;
endif
stop
@enduml
